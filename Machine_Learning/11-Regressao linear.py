# -*- coding: utf-8 -*-
"""Machine Learning e Data Science com Python de A à Z - Regressão.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/16zWFJKKBZz6BcMwUU3IT4XiUnFQIVG9y

# Machine Learning e Data Science com Python de A à Z IA Expert Academy - Regressão

# Regressão linear simples

## Base plano saúde
"""

!pip install plotly --upgrade

import plotly.express as px
import plotly.graph_objects as go
import seaborn as sns
import matplotlib.pyplot as plt
import pandas as pd
import numpy as np

base_plano_saude = pd.read_csv('plano_saude.csv')
base_plano_saude

X_plano_saude = base_plano_saude.iloc[:, 0].values
X_plano_saude

y_plano_saude = base_plano_saude.iloc[:, 1].values
y_plano_saude

np.corrcoef(X_plano_saude, y_plano_saude)

X_plano_saude.shape

X_plano_saude = X_plano_saude.reshape(-1,1)
X_plano_saude.shape

from sklearn.linear_model import LinearRegression
regressor_plano_saude = LinearRegression()
regressor_plano_saude.fit(X_plano_saude, y_plano_saude)

# b0
regressor_plano_saude.intercept_

# b1
regressor_plano_saude.coef_

previsoes = regressor_plano_saude.predict(X_plano_saude)
previsoes

X_plano_saude.ravel()

grafico = px.scatter(x = X_plano_saude.ravel(), y = y_plano_saude)
grafico.add_scatter(x = X_plano_saude.ravel(), y = previsoes, name = 'Regressão')
grafico.show()

regressor_plano_saude.intercept_ + regressor_plano_saude.coef_ * 40

regressor_plano_saude.predict([[40]])

regressor_plano_saude.score(X_plano_saude, y_plano_saude)

from yellowbrick.regressor import ResidualsPlot
visualizador = ResidualsPlot(regressor_plano_saude)
visualizador.fit(X_plano_saude, y_plano_saude)
visualizador.poof()

"""## Base preço das casas - MAE 172.604, 0.48"""

base_casas = pd.read_csv('house_prices.csv')
base_casas

base_casas.describe()

base_casas.isnull().sum()

base_casas.corr()

figura = plt.figure(figsize=(20,20))
sns.heatmap(base_casas.corr(), annot=True);

X_casas = base_casas.iloc[:,5:6].values
X_casas

y_casas = base_casas.iloc[:, 2].values
y_casas

from sklearn.model_selection import train_test_split
X_casas_treinamento, X_casas_teste, y_casas_treinamento, y_casas_teste = train_test_split(X_casas, y_casas, test_size = 0.3, random_state = 0)

X_casas_treinamento.shape, y_casas_treinamento.shape

X_casas_teste.shape, y_casas_teste.shape

from sklearn.linear_model import LinearRegression
regressor_simples_casas = LinearRegression()
regressor_simples_casas.fit(X_casas_treinamento, y_casas_treinamento)

# b0
regressor_simples_casas.intercept_

# b1
regressor_simples_casas.coef_

regressor_simples_casas.score(X_casas_treinamento, y_casas_treinamento)

regressor_simples_casas.score(X_casas_teste, y_casas_teste)

previsoes = regressor_simples_casas.predict(X_casas_treinamento)
previsoes

grafico = px.scatter(x = X_casas_treinamento.ravel(), y = previsoes)
grafico.show()

grafico1 = px.scatter(x = X_casas_treinamento.ravel(), y = y_casas_treinamento)
grafico2 = px.line(x = X_casas_treinamento.ravel(), y = previsoes)
grafico2.data[0].line.color = 'red'
grafico3 = go.Figure(data=grafico1.data + grafico2.data)
grafico3

previsoes_teste = regressor_simples_casas.predict(X_casas_teste)
previsoes_teste

y_casas_teste

abs(y_casas_teste - previsoes_teste).mean()

from sklearn.metrics import mean_absolute_error, mean_squared_error

mean_absolute_error(y_casas_teste, previsoes_teste)

mean_squared_error(y_casas_teste, previsoes_teste)

np.sqrt(mean_squared_error(y_casas_teste, previsoes_teste))

grafico1 = px.scatter(x = X_casas_teste.ravel(), y = y_casas_teste)
grafico2 = px.line(x = X_casas_teste.ravel(), y = previsoes_teste)
grafico2.data[0].line.color = 'red'
grafico3 = go.Figure(data=grafico1.data + grafico2.data)
grafico3.show()

"""# Regressão linear múltipla

## Base preço das casas - MAE 123.888, 0.68
"""

base_casas

X_casas = base_casas.iloc[:, 3:19].values
X_casas

y_casas = base_casas.iloc[:, 2].values
y_casas

from sklearn.model_selection import train_test_split
X_casas_treinamento, X_casas_teste, y_casas_treinamento, y_casas_teste = train_test_split(X_casas, y_casas, test_size = 0.3, random_state = 0)

X_casas_treinamento.shape, X_casas_teste.shape

regressor_multiplo_casas = LinearRegression()
regressor_multiplo_casas.fit(X_casas_treinamento, y_casas_treinamento)

regressor_multiplo_casas.intercept_

regressor_multiplo_casas.coef_

len(regressor_multiplo_casas.coef_)

regressor_multiplo_casas.score(X_casas_treinamento, y_casas_treinamento)

regressor_multiplo_casas.score(X_casas_teste, y_casas_teste)

previsoes = regressor_multiplo_casas.predict(X_casas_teste)
previsoes

y_casas_teste

from sklearn.metrics import mean_absolute_error
mean_absolute_error(y_casas_teste, previsoes)

"""# Regressão polinomial

## Base plano de saúde
"""

base_plano_saude2 = pd.read_csv('plano_saude2.csv')
base_plano_saude2

X_plano_saude2 = base_plano_saude2.iloc[:, 0:1].values
y_plano_saude2 = base_plano_saude2.iloc[:, 1].values

X_plano_saude2

y_plano_saude2

from sklearn.preprocessing import PolynomialFeatures
poly = PolynomialFeatures(degree = 4)
X_plano_saude2_poly = poly.fit_transform(X_plano_saude2)

X_plano_saude2_poly.shape

18 * 18, 18 * 18 * 18, 18 * 18 * 18 * 18

X_plano_saude2_poly[0]

23 * 23

X_plano_saude2_poly[1]

X_plano_saude2_poly

regressor_saude_polinomial = LinearRegression()
regressor_saude_polinomial.fit(X_plano_saude2_poly, y_plano_saude2)

# b0
regressor_saude_polinomial.intercept_

# b1 (n)
regressor_saude_polinomial.coef_

novo = [[40]]

novo = poly.transform(novo)
novo

regressor_saude_polinomial.predict(novo)

previsoes = regressor_saude_polinomial.predict(X_plano_saude2_poly)
previsoes

grafico = px.scatter(x = X_plano_saude2[:,0], y = y_plano_saude2)
grafico.add_scatter(x = X_plano_saude2[:,0], y = previsoes, name = 'Regressão')
grafico.show()

"""## Base preço das casas - MAE 101.225, 0.81"""

X_casas_treinamento.shape

X_casas_teste.shape

from sklearn.preprocessing import PolynomialFeatures
poly = PolynomialFeatures(degree = 2)
X_casas_treinamento_poly = poly.fit_transform(X_casas_treinamento)
X_casas_teste_poly = poly.transform(X_casas_teste)

X_casas_treinamento_poly.shape, X_casas_teste_poly.shape

regressor_casas_poly = LinearRegression()
regressor_casas_poly.fit(X_casas_treinamento_poly, y_casas_treinamento)

regressor_casas_poly.score(X_casas_treinamento_poly, y_casas_treinamento)

regressor_casas_poly.score(X_casas_teste_poly, y_casas_teste)

previsoes = regressor_casas_poly.predict(X_casas_teste_poly)
previsoes

y_casas_teste

mean_absolute_error(y_casas_teste, previsoes)

"""# Árvores de decisão

## Base plano saúde
"""

X_plano_saude2

y_plano_saude2

from sklearn.tree import DecisionTreeRegressor
regressor_arvore_saude = DecisionTreeRegressor()
regressor_arvore_saude.fit(X_plano_saude2, y_plano_saude2)

previsoes = regressor_arvore_saude.predict(X_plano_saude2)
previsoes

regressor_arvore_saude.score(X_plano_saude2, y_plano_saude2)

grafico = px.scatter(x = X_plano_saude2.ravel(), y = y_plano_saude2)
grafico.add_scatter(x = X_plano_saude2.ravel(), y = previsoes, name = 'Regressão')
grafico.show()

X_teste_arvore = np.arange(min(X_plano_saude2), max(X_plano_saude2), 0.1)
X_teste_arvore

X_teste_arvore.shape

X_teste_arvore = X_teste_arvore.reshape(-1,1)
X_teste_arvore.shape

grafico = px.scatter(x = X_plano_saude2.ravel(), y = y_plano_saude2)
grafico.add_scatter(x = X_teste_arvore.ravel(), y = regressor_arvore_saude.predict(X_teste_arvore), name = 'Regressão')
grafico.show()

regressor_arvore_saude.predict([[40.6]])

"""## Base preço das casas - MAE 99.917, 0.73"""

X_casas_treinamento.shape

X_casas_treinamento

y_casas_treinamento

X_casas_teste.shape

regressor_arvore_casas = DecisionTreeRegressor()
regressor_arvore_casas.fit(X_casas_treinamento, y_casas_treinamento)

regressor_arvore_casas.score(X_casas_treinamento, y_casas_treinamento)

regressor_arvore_casas.score(X_casas_teste, y_casas_teste)

previsoes = regressor_arvore_casas.predict(X_casas_teste)
previsoes

y_casas_teste

from sklearn.metrics import mean_absolute_error
mean_absolute_error(y_casas_teste, previsoes)

"""# Random forest

## Base plano de saúde
"""

X_plano_saude2

y_plano_saude2

from sklearn.ensemble import RandomForestRegressor
regressor_random_forest_saude = RandomForestRegressor(n_estimators = 10)
regressor_random_forest_saude.fit(X_plano_saude2, y_plano_saude2)

regressor_random_forest_saude.score(X_plano_saude2, y_plano_saude2)

X_teste_arvore

grafico = px.scatter(x = X_plano_saude2.ravel(), y = y_plano_saude2)
grafico.add_scatter(x = X_teste_arvore.ravel(), y = regressor_random_forest_saude.predict(X_teste_arvore), name = 'Regressão')
grafico.show()

regressor_random_forest_saude.predict([[40]])

"""## Base preço das casas - MAE 67.615, 0.88"""

X_casas_treinamento.shape

X_casas_treinamento

y_casas_treinamento

X_casas_teste

regressor_random_forest_casas = RandomForestRegressor(n_estimators=100)
regressor_random_forest_casas.fit(X_casas_treinamento, y_casas_treinamento)

regressor_random_forest_casas.score(X_casas_treinamento, y_casas_treinamento)

regressor_random_forest_casas.score(X_casas_teste, y_casas_teste)

previsoes = regressor_random_forest_casas.predict(X_casas_teste)
previsoes

y_casas_teste

from sklearn.metrics import mean_absolute_error
mean_absolute_error(y_casas_teste, previsoes)

"""# SVM

## Base plano de saúde
"""

X_plano_saude2

y_plano_saude2

# Kernel linear
from sklearn.svm import SVR
regressor_svr_saude_linear = SVR(kernel = 'linear')
regressor_svr_saude_linear.fit(X_plano_saude2, y_plano_saude2)

grafico = px.scatter(x = X_plano_saude2.ravel(), y = y_plano_saude2)
grafico.add_scatter(x = X_plano_saude2.ravel(), y = regressor_svr_saude_linear.predict(X_plano_saude2), name = 'Regressão')
grafico.show()

# Kernel polinomial
regressor_svr_saude_poly = SVR(kernel='poly', degree=4)
regressor_svr_saude_poly.fit(X_plano_saude2, y_plano_saude2)

grafico = px.scatter(x = X_plano_saude2.ravel(), y = y_plano_saude2)
grafico.add_scatter(x = X_plano_saude2.ravel(), y = regressor_svr_saude_poly.predict(X_plano_saude2), name = 'Regressão')
grafico.show()

X_plano_saude2

y_plano_saude2

from sklearn.preprocessing import StandardScaler
scaler_x = StandardScaler()
X_plano_saude2_scaled = scaler_x.fit_transform(X_plano_saude2)
scaler_y = StandardScaler()
y_plano_saude2_scaled = scaler_y.fit_transform(y_plano_saude2.reshape(-1,1))

X_plano_saude2_scaled

y_plano_saude2_scaled

# Kernel rbf
regressor_svr_saude_rbf = SVR(kernel='rbf')
regressor_svr_saude_rbf.fit(X_plano_saude2_scaled, y_plano_saude2_scaled.ravel())

grafico = px.scatter(x = X_plano_saude2_scaled.ravel(), y = y_plano_saude2_scaled.ravel())
grafico.add_scatter(x = X_plano_saude2_scaled.ravel(), y = regressor_svr_saude_rbf.predict(X_plano_saude2_scaled), name = 'Regressão')
grafico.show()

novo = [[40]]

novo = scaler_x.transform(novo)
novo

#scaler_y.inverse_transform(regressor_svr_saude_rbf.predict(novo)) -- Atualizado 17/08/2022 -- Inclusão .reshape(-1, 1)

scaler_y.inverse_transform(regressor_svr_saude_rbf.predict(novo).reshape(-1, 1))

"""## Base preço das casas - MAE 82.453, 0.73"""

X_casas_treinamento.shape

X_casas_treinamento

y_casas_treinamento

X_casas_teste.shape

from sklearn.preprocessing import StandardScaler
scaler_x_casas = StandardScaler()
X_casas_treinamento_scaled = scaler_x_casas.fit_transform(X_casas_treinamento)
scaler_y_casas = StandardScaler()
y_casas_treinamento_scaled = scaler_y_casas.fit_transform(y_casas_treinamento.reshape(-1,1))

X_casas_treinamento_scaled

y_casas_treinamento_scaled

X_casas_treinamento_scaled.shape, y_casas_treinamento_scaled.shape

X_casas_teste_scaled = scaler_x_casas.transform(X_casas_teste)
y_casas_teste_scaled = scaler_y_casas.transform(y_casas_teste.reshape(-1,1))

X_casas_teste_scaled.shape, y_casas_teste_scaled.shape

X_casas_teste_scaled

y_casas_teste_scaled

regressor_svr_casas = SVR(kernel='rbf')
regressor_svr_casas.fit(X_casas_treinamento_scaled, y_casas_treinamento_scaled.ravel())

regressor_svr_casas.score(X_casas_treinamento_scaled, y_casas_treinamento_scaled)

regressor_svr_casas.score(X_casas_teste_scaled, y_casas_teste_scaled)

#previsoes = regressor_svr_casas.predict(X_casas_teste_scaled) -- Atualizado 17/08/2022 -- Inclusão .reshape(-1, 1)
#previsoes

previsoes = regressor_svr_casas.predict(X_casas_teste_scaled).reshape(-1, 1)
previsoes

y_casas_teste_scaled

y_casas_teste_inverse = scaler_y_casas.inverse_transform(y_casas_teste_scaled)
previsoes_inverse = scaler_y_casas.inverse_transform(previsoes)

y_casas_teste_inverse

previsoes_inverse

from sklearn.metrics import mean_absolute_error
mean_absolute_error(y_casas_teste_inverse, previsoes_inverse)

"""# Redes neurais artificiais

## Base plano de saúde
"""

X_plano_saude2_scaled

y_plano_saude2_scaled

from sklearn.neural_network import MLPRegressor
regressor_rna_saude = MLPRegressor(max_iter=1000)
regressor_rna_saude.fit(X_plano_saude2_scaled, y_plano_saude2_scaled.ravel())

regressor_rna_saude.score(X_plano_saude2_scaled, y_plano_saude2_scaled)

grafico = px.scatter(x = X_plano_saude2_scaled.ravel(), y = y_plano_saude2_scaled.ravel())
grafico.add_scatter(x = X_plano_saude2_scaled.ravel(), y = regressor_rna_saude.predict(X_plano_saude2_scaled), name = 'Regressão')
grafico.show()

novo = [[40]]
novo = scaler_x.transform(novo)
novo

##scaler_y.inverse_transform(regressor_rna_saude.predict(novo)) -- Atualizado 17/08/2022 -- Inclusão .reshape(-1, 1)

scaler_y.inverse_transform(regressor_rna_saude.predict(novo).reshape(-1, 1))

"""## Base preço das casas - MAE 76.311, 0.87"""

X_casas_treinamento_scaled.shape

X_casas_treinamento_scaled

y_casas_treinamento_scaled

X_casas_teste_scaled.shape

(16 + 1) / 2

# 16 -> 9 -> 9 -> 1
regressor_rna_casas = MLPRegressor(max_iter=1000, hidden_layer_sizes=(9,9))
regressor_rna_casas.fit(X_casas_treinamento_scaled, y_casas_treinamento_scaled.ravel())

regressor_rna_casas.score(X_casas_treinamento_scaled, y_casas_treinamento_scaled)

regressor_rna_casas.score(X_casas_teste_scaled, y_casas_teste_scaled)

##previsoes = regressor_rna_casas.predict(X_casas_teste_scaled) -- Atualizado 17/08/2022 -- Inclusão .reshape(-1, 1)
##previsoes

previsoes = regressor_rna_casas.predict(X_casas_teste_scaled).reshape(-1, 1)
previsoes

y_casas_teste_scaled

y_casas_teste_inverse = scaler_y_casas.inverse_transform(y_casas_teste_scaled)
previsoes_inverse = scaler_y_casas.inverse_transform(previsoes)

y_casas_teste_inverse

previsoes_inverse

from sklearn.metrics import mean_absolute_error
mean_absolute_error(y_casas_teste_inverse, previsoes_inverse)