# -*- coding: utf-8 -*-
"""Série Temporal.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/11TxMSfr_RW5jElc-I20YksJCbCPytfOm

## Etapa 1: Instalação da biblioteca
"""

!pip install pmdarima

"""## Etapa 2: Importação das bibliotecas"""

import pandas as pd
import numpy as np
import matplotlib.pylab as plt
from datetime import datetime
from statsmodels.tsa.seasonal import seasonal_decompose
from pmdarima.arima import auto_arima

"""## Etapa 3: Carregamento da base de dados"""

dataset = pd.read_csv('AirPassengers.csv')

dataset.head()

dateparse = lambda dates: pd.datetime.strptime(dates, '%Y-%m')
dataset = pd.read_csv('AirPassengers.csv', parse_dates = ['Month'], index_col = 'Month', date_parser = dateparse)

dataset.head()

time_series = dataset['#Passengers']

time_series

"""## Etapa 4: Exploração da série temporal"""

time_series[1]

time_series['1949-02']

time_series[datetime(1949,2,1)]

time_series['1950-01-01':'1950-07-31']

time_series[:'1950-07-31']

time_series['1950']

time_series.index.max()

time_series.index.min()

plt.plot(time_series)

time_series_ano = time_series.resample('A').sum()
plt.plot(time_series_ano)

time_series_mes = time_series.groupby([lambda x: x.month]).sum()
plt.plot(time_series_mes)

time_series_datas = time_series['1960-01-01':'1960-12-01']
plt.plot(time_series_datas)

"""## Etapa 5: Decomposição da série temporal"""

decomposicao = seasonal_decompose(time_series)
tendencia = decomposicao.trend
sazonal = decomposicao.seasonal
aleatorio = decomposicao.resid

plt.plot(tendencia)

plt.plot(sazonal)

plt.plot(aleatorio)

"""## Etapa 6: Previsões com ARIMA"""

# Parâmetors P, Q e D
model = auto_arima(time_series)

model.order

predictions = model.predict(n_periods=24)

predictions

"""## Etapa 7 - Gráfico das previsões"""

len(time_series)

train = time_series[:130]
train.shape

train.index.min(), train.index.max()

test = time_series[130:]
test.shape

test.index.min(), test.index.max()

model2 = auto_arima(train, suppress_warnings=True)

test.index

prediction = pd.DataFrame(model2.predict(n_periods=14), index=test.index)
prediction.columns = ['passengers_predictions']
prediction

test

plt.figure(figsize=(8,5))
plt.plot(train, label = 'Training')
plt.plot(test, label = 'Test')
plt.plot(prediction, label = 'Predictions')
plt.legend();