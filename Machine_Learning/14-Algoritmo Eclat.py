# -*- coding: utf-8 -*-
"""Machine Learning e Data Science com Python de A à Z - Regras de associação.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1gqGl3z42o3dan2hvi2iwpFSEUuaB1fEH

# Machine Learning e Data Science com Python de A à Z IA Expert Academy - Regras de associação

# Algoritmo Apriori
"""

!pip install apyori

import pandas as pd
from apyori import apriori

"""## Base de dados mercado 1"""

base_mercado1 = pd.read_csv('mercado.csv', header = None)
base_mercado1

base_mercado1.shape

transacoes = []
for i in range(len(base_mercado1)):
  #print(i)
  #print(base_mercado1.values[i, 0])
  transacoes.append([str(base_mercado1.values[i, j]) for j in range(base_mercado1.shape[1])])

transacoes

type(transacoes)

regras = apriori(transacoes, min_support = 0.3, min_confidence = 0.8, min_lift = 2)
resultados = list(regras)

resultados

len(resultados)

resultados[2]

"""RelationRecord(items=frozenset({'cafe', 'manteiga', 'pao'}), support=0.3, ordered_statistics=[OrderedStatistic(items_base=frozenset({'cafe'}), items_add=frozenset({'manteiga', 'pao'}), confidence=1.0, lift=2.5), OrderedStatistic(items_base=frozenset({'cafe', 'manteiga'}), items_add=frozenset({'pao'}), confidence=1.0, lift=2.0), OrderedStatistic(items_base=frozenset({'cafe', 'pao'}), items_add=frozenset({'manteiga'}), confidence=1.0, lift=2.0)])"""

resultados[2][0]

resultados[2][1]

r = resultados[2][2]
r

r[2]

r[2][0]

r[2][1]

r[2][2]

r[2][3]

A = []
B = []
suporte = []
confianca = []
lift = []

for resultado in resultados:
  #print(resultado)
  s = resultado[1]
  #print(s)
  result_rules = resultado[2]
  #print(result_rule)
  for result_rule in result_rules:
    #print(result_rule)
    a = list(result_rule[0])
    b = list(result_rule[1])
    c = result_rule[2]
    l = result_rule[3]
    #print(a, ' - ', b, ' - ', c, ' - ', l)
    A.append(a)
    B.append(b)
    suporte.append(s)
    confianca.append(c)
    lift.append(l)

A

B

s

confianca

lift

rules_df = pd.DataFrame({'A': A, 'B': B, 'suporte': suporte, 'confianca': confianca, 'lift': lift})

rules_df.sort_values(by = 'lift', ascending = False)

"""## Base de dados mercado 2"""

base_mercado2 = pd.read_csv('mercado2.csv', header=None)
base_mercado2

base_mercado2.shape

transacoes = []
for i in range(base_mercado2.shape[0]):
  transacoes.append([str(base_mercado2.values[i, j]) for j in range(base_mercado2.shape[1])])

transacoes

# Produtos que são vendidos 4 vezes por dia

4 * 7

28 / 7501

regras = apriori(transacoes, min_support = 0.003, min_confidence = 0.2, min_lift = 3)
resultados = list(regras)
len(resultados)

A = []
B = []
suporte = []
confianca = []
lift = []

for resultado in resultados:
  s = resultado[1]
  result_rules = resultado[2]
  for result_rule in result_rules:
    a = list(result_rule[0])
    b = list(result_rule[1])
    c = result_rule[2]
    l = result_rule[3]
    A.append(a)
    B.append(b)
    suporte.append(s)
    confianca.append(c)
    lift.append(l)

rules_df = pd.DataFrame({'A': A, 'B': B, 'suporte': suporte, 'confianca': confianca, 'lift': lift})
rules_df.sort_values(by = 'confianca', ascending = False)

"""# ECLAT"""

!pip install pyECLAT

base_mercado1 = pd.read_csv('mercado.csv', header = None)
base_mercado1

from pyECLAT import ECLAT
eclat = ECLAT(data = base_mercado1)

eclat.df_bin

eclat.uniq_

indices, suporte = eclat.fit(min_support=0.3, min_combination=1, max_combination=3)

indices

suporte